import Head from "next/head";
import { useAuthState, useSignOut } from "react-firebase-hooks/auth";
import { auth, firestore, storage } from "./firebase";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import Nav from "./components/nav/Nav";
import Home_left from "./components/Home/Home_left";
import Home_main from "./components/Home/Home_main";
import Home_right from "./components/Home/Home_right";
import { collection, doc, getDoc, getDocs, query } from "firebase/firestore";
import { signUpUserInfoTypes } from "./types/authtype";

export default function Home() {
  const router = useRouter();
  const [signOut, loadingSignOut, errorSignOut] = useSignOut(auth);
  const [user, loading, error] = useAuthState(auth);
  const [userInfo, setUserInfo] = useState<signUpUserInfoTypes | null>(null);
  const [allUsers, setAllUsers] = useState<any>();

  const getUserInformation = async () => {
    if (user) {
      const docRef = doc(firestore, "users", user.uid);
      const docSnap = await getDoc(docRef);

      if (docSnap.exists()) {
        setUserInfo(docSnap.data() as signUpUserInfoTypes);
      } else {
        // doc.data() will be undefined in this case
        console.log("No such document!");
      }
    }
  };

  const getingAllUser = async () => {
    // geting refrense
    const getingFrindsQuery = query(collection(firestore, "users"));
    // get data
    const querySnapshot = await getDocs(getingFrindsQuery);

    let user: any;
    querySnapshot.forEach((doc) => {
      user = querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    });
    if (user) {
      setAllUsers(user);
    }
  };

  useEffect(() => {
    if (!user) return;
    getingAllUser();
  }, [user]);

  useEffect(() => {
    if (user) {
      getUserInformation();
    }
  }, [user]);

  useEffect(() => {
    if (!user) {
      router.push("/auth");
    }
  }, [user]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Nav allUsers={allUsers} userInfo={userInfo!} />
      <div className="flex justify-between align-middle bg-[#F0F2F5] h-screen">
        <div className="hidden md:w-1/3 md:flex md:justify-start">
          {userInfo && user && <Home_left userInfo={userInfo} user={user} />}
        </div>
        <div className="w-[80%] justify-center md:w-1/2 ml-auto mr-auto overflow-y-scroll ">
          {userInfo && user && (
            <Home_main
              userInfo={userInfo}
              user={user}
              storage={storage}
              firestore={firestore}
            />
          )}
        </div>
        <div className="hidden  md:w-1/3 md:flex md:justify-end">
          <Home_right />
        </div>
      </div>
    </>
  );
}

{
  /* <button
        onClick={async () => {
          const success = await signOut();
          if (success) {
            alert("You are sign out");
          }
        }}
      >
        Sign out
      </button> */
}
